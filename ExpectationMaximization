%matplotlib inline

import numpy as np
np.atleast_2d
np.sum
import scipy.stats
import scipy.io as spio
import matplotlib.pyplot as plt
from numpy.linalg import inv

# the Gaussian means (as column vectors -- ie, the mean for Gaussian 0 is mus[:,0]
mus = np.asarray( [[-1.17288986, -0.11642103],
                   [-0.16526981,  0.70142713]])
 
# the Gaussian covariance matrices
covs = list()
covs.append( 
    np.asarray([[ 0.74072815,  0.09252716],
                [ 0.09252716,  0.5966275 ]]) )
covs.append( 
    np.asarray([[ 0.39312776, -0.46488887],
                [-0.46488887,  1.64990767]]) )
 
# The Gaussian mixing weights
mws = [ 0.68618439, 0.31381561 ]  # called alpha in the slides

def cov_to_pts( cov ):
    circ = np.linspace( 0, 2*np.pi, 100 )
    sf = np.asarray( [ np.cos( circ ), np.sin( circ ) ] )
    [u,s,v] = np.linalg.svd( cov )
    pmat = u*2.447*np.sqrt(s) # 95% confidence
    return np.dot(  pmat, sf )

mat = spio.loadmat("Downloads/old_faithful.mat")

data = mat['data']

data = data - data.mean(axis = 0)

def makeplt(covariances, means):
    axes = plt.gca()
    axes.set_xlim([-3.0,3.0])
    axes.set_ylim([-40.0,30.0])
    plt.grid(color='white')
    axes.set_facecolor('whitesmoke')
    plt.tight_layout()
    
    for i in range(272):
        plt.scatter(data[i,0], data[i,1])
    
    cov = cov_to_pts( covariances )

    for k in range(1):
        x = cov[0] + means[0,k]
        y = cov[1] + means[1,k]
        plt.plot( x.T, y.T, c="b")
        
        
 def cov_to_pts( cov ):
    circ = np.linspace( 0, 2*np.pi, 100 )
    sf = np.asarray( [ np.cos( circ ), np.sin( circ ) ] )
    [u,s,v] = np.linalg.svd( cov )
    pmat = u*2.447*np.sqrt(s) # 95% confidence
    return np.dot(  pmat, sf )

def em(mus, covs, mws):
    rs = update_resp(data, mus, covs, mws)
    Nk = find_Nk(rs)
    mws2 = update_mixw(rs, Nk)
    mus = update_means(data, rs, Nk)
    covs = update_covs(data, mus, rs, Nk)
    return mus, covs, mws2, rs 

# Here I update the responsibilities
def update_resp(data, mus, covs, mws):
    rs = np.zeros(data.shape)
    for k in range(2):
        resp = scipy.stats.multivariate_normal.pdf(data, mus[:,k], covs[k]) * mws[k]
        rs[:,k] = resp
    val = np.sum(rs, axis=1)[:, None]
    rs = rs/ val
    return rs

def find_Nk(rs):
    Nk = np.sum(rs, axis=0)[:, None]
    return Nk


# Here I update the mixing weights
def update_mixw(rs, Nk):
    N = 272
    mws2 = (Nk/N).T[:, None]
    mws = mws2[0,0]
    return mws

# Here I update the means
def update_means(data, rs, Nk):
    for k in range(2):
        wx = rs[:,k:k+1] * data
        mus[:,k] = np.sum(wx, axis=0)/Nk[k]
    return mus


# Here I update the covariances
def update_covs(data, mus, rs, Nk):
    for k in range(2):
        dm = data - mus[:,k]
        wmu = rs[:,k:k+1] * dm
        covs[k] = np.dot((wmu).T, dm) / Nk[k]
    return covs

fignum = 1;
for i in range(36):
    if (i > 0):
        mus, covs, mws, resp = em(mus, covs, mws)
    if (i == 0 or i % 4 == 1):
        plt.figure(fignum)
        fignum = fignum + 1
        axes = plt.gca()
        axes.set_xlim([-3.0,3.0])
        axes.set_ylim([-40.0, 30])
        plt.title("Iteration "+str(i))
        if (i > 0):
            col = np.where(resp[:,0] < resp[:, 1],'mediumseagreen', 'lightcoral')
            plt.scatter(data[:,0], data[:,1], c=col)
        else:
            plt.scatter(data[:,0], data[:,1], c='dimgrey')
        e_colors = ['r-', 'g-']
        m_colors = ['ro', 'go']
        for j in range(2):
            ellipse = cov_to_pts(covs[j])
            plt.plot(ellipse[0, :] + mus[0,j], ellipse[1, :] + mus[1,j], e_colors[j])
            plt.plot(mus[0,j], mus[1,j], m_colors[j])
