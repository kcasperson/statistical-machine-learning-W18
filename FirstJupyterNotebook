import cairo
import numpy
from matplotlib import pyplot as plt
# A simple function to display an image in an ipython notebook

def nbimage( data ):
    from IPython.display import display, Image as IpyImage
    from PIL.Image import fromarray
    try:
        from StringIO import StringIO
    except ImportError:
        from io import BytesIO
 
    s = BytesIO()
    fromarray( data ).save( s, 'png' )
    display(IpyImage(s.getvalue()))
    #plt.imshow(data)


    
 
WIDTH = 512
HEIGHT = 288
 
# this is a numpy buffer to hold the image data
data = numpy.zeros( (HEIGHT,WIDTH,4), dtype=numpy.uint8 )
 
# this creates a cairo context based on the numpy buffer
ims = cairo.ImageSurface.create_for_data( data, cairo.FORMAT_ARGB32, WIDTH, HEIGHT )
cr = cairo.Context( ims )
 
# draw a blue line
cr.set_source_rgba( 1.0, 0.0, 0.0, 1.0 )
cr.set_line_width( 2.0 )
cr.move_to( 0.0, 0.0 )
cr.line_to( 100.0, 100.0 )
cr.stroke() #this actually draws it

np = numpy

for i in range(0, 978):
    red = np.random.rand()
    green = np.random.rand()
    blue = np.random.rand()
    alpha = np.random.rand()
    loc1 = np.random.randint(0, 512)
    loc2 = np.random.randint(0, 288)
    cr.set_source_rgba(red, green, blue, alpha)
    cr.move_to( loc1, loc2 )
    cr.curve_to( np.random.randint(0, 512), np.random.randint(0, 288) ,np.random.randint(0, 512), np.random.randint(0, 288) ,np.random.randint(0, 512), np.random.randint(0, 288)  )
    cr.stroke()
 
# display the image
nbimage( data )




import pandas
import matplotlib.pyplot as plt


# this tells seaborn and matplotlib to generate plots inline in the notebook
%matplotlib inline  
 
# these two lines allow you to control the figure size
%pylab inline
pylab.rcParams['figure.figsize'] = (16.0, 8.0)

data = pandas.read_csv("Downloads/store_train.csv", low_memory=False)

data['Date'] = pandas.to_datetime(data['Date'])
data.index = data.Date

right_store = data['Store'] == 1

sales = data['Sales']

graph = sales[right_store].plot(title = "Sales of Store #1")
graph.invert_xaxis()
graph.set_ylabel("Sales ($)")
graph.legend('Sales')

